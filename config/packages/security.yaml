security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        #users_in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\Adherent
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            #controle tous ce qui passe par les routes api
            pattern: ^/api
            #ne garde des infos en session
            stateless : true 
            #anonymous: true  
            #infos pour se connecter
            json_login:
                #se base sur email pour generer le token
                username_path : email
                # le chemin à utiliser pour se connecter
                check_path : /api/login_check
                 # en cas de succes la classe à appeler
                success_handler : lexik_jwt_authentication.handler.authentication_success
                #classe à appeler en cas d’erreur
                failure_handler : lexik_jwt_authentication.handler.authentication_failure
            guard :
                #la classe où il va gerer le token
                authenticator : lexik_jwt_authentication.jwt_token_authenticator


    #Donner les droits
    access_control:
      # pour aller sur la route api on n’a pas besoin de se connecter
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api$, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # pour les autres url il faut etre authentifier
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY}
        
    role_hierarchy:
      ROLE_MANAGER : ROLE_ADHERENT
      ROLE_ADMIN   : ROLE_MANAGER
